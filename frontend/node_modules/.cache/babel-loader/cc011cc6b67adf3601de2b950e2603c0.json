{"ast":null,"code":"var _jsxFileName = \"D:\\\\CryptoImage\\\\frontend\\\\src\\\\Encode.js\";\nimport React from 'react';\nimport lock from './lock.png';\nimport anime from 'animejs/lib/anime.es';\nimport { random } from 'animejs';\n\nclass Encode extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageArray: null,\n      imageURI: null,\n      msg: ''\n    };\n\n    this.getCryptoImage = async e => {\n      e.preventDefault();\n      fetch('http://localhost:5000/encode', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          msg: this.state.msg,\n          imageArray: this.arrToBase64(this.state.imageArray)\n        })\n      }).then(res => res.blob()).then(imageData => {\n        this.props.encodeImg(URL.createObjectURL(imageData));\n      });\n    };\n\n    this.processImage = e => {\n      const readerArray = new FileReader(),\n            readerURI = new FileReader();\n      const imageFile = e.target.files[0];\n\n      if (imageFile) {\n        readerArray.readAsArrayBuffer(imageFile);\n        readerURI.readAsDataURL(imageFile);\n        document.querySelector('.image-display').classList.remove('hidden');\n      }\n\n      readerArray.addEventListener('load', () => {\n        this.setState({\n          imageArray: readerArray.result\n        });\n      });\n      readerURI.addEventListener('load', () => {\n        this.setState({\n          imageURI: readerURI.result\n        });\n      });\n    };\n\n    this.updateMsg = e => {\n      this.setState({\n        msg: e.target.value\n      });\n    };\n\n    this.shakeLock = () => {\n      anime({\n        targets: '.lock img',\n        keyframes: [{\n          translateX: Math.random() * 3,\n          translateY: Math.random() * 3\n        }, {\n          translateX: Math.random() * 3,\n          translateY: Math.random() * 3\n        }],\n        duration: 300\n      });\n    };\n  }\n\n  // Converts image array to base 64 string; used to shrink file size in order successfully send to backend\n  arrToBase64(buffer) {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n\n    return window.btoa(binary);\n  } // Ensures that the value of message is in sync with that of the input\n\n\n  render() {\n    return React.createElement(\"form\", {\n      id: \"encode-form\",\n      onSubmit: this.getCryptoImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: this.processImage,\n      name: \"imageFile\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"image-display hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Image Preview\"), React.createElement(\"img\", {\n      src: this.state.imageURI,\n      alt: \"Cannot render\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      placeholder: \"Enter in the message you wish to cryptify within in the image here...\",\n      onChange: this.updateMsg,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"lock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: lock,\n      alt: \"Encodify\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      onMouseOver: this.shakeLock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Encode;","map":{"version":3,"sources":["D:/CryptoImage/frontend/src/Encode.js"],"names":["React","lock","anime","random","Encode","Component","state","imageArray","imageURI","msg","getCryptoImage","e","preventDefault","fetch","headers","method","body","JSON","stringify","arrToBase64","then","res","blob","imageData","props","encodeImg","URL","createObjectURL","processImage","readerArray","FileReader","readerURI","imageFile","target","files","readAsArrayBuffer","readAsDataURL","document","querySelector","classList","remove","addEventListener","setState","result","updateMsg","value","shakeLock","targets","keyframes","translateX","Math","translateY","duration","buffer","binary","bytes","Uint8Array","i","byteLength","String","fromCharCode","window","btoa","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport lock from './lock.png';\r\nimport anime from 'animejs/lib/anime.es'\r\nimport { random } from 'animejs';\r\n\r\nclass Encode extends React.Component {\r\n    state = {\r\n        imageArray: null,\r\n        imageURI: null,\r\n        msg: '',\r\n    }\r\n    // Sends image and message to backend and returns the image URI to display to website\r\n    getCryptoImage = async (e) => {\r\n        e.preventDefault();\r\n        fetch('http://localhost:5000/encode', {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({ msg: this.state.msg, imageArray: this.arrToBase64(this.state.imageArray) })\r\n        })\r\n        .then((res) => res.blob())\r\n        .then((imageData) => {\r\n            this.props.encodeImg(URL.createObjectURL(imageData));\r\n        })\r\n    }\r\n    // Takes in an image file and converts it both to URI to display to website + to an array to send to the backend\r\n    processImage = (e) => {\r\n        const readerArray = new FileReader(), readerURI = new FileReader();\r\n        const imageFile = e.target.files[0];\r\n\r\n        if (imageFile) {\r\n            readerArray.readAsArrayBuffer(imageFile);\r\n            readerURI.readAsDataURL(imageFile);\r\n            document.querySelector('.image-display').classList.remove('hidden');\r\n        }\r\n\r\n        readerArray.addEventListener('load', () => {\r\n            this.setState({\r\n                imageArray: readerArray.result,\r\n            });\r\n        });\r\n\r\n        readerURI.addEventListener('load', () => {\r\n            this.setState({\r\n                imageURI: readerURI.result,\r\n            });\r\n        });\r\n    }\r\n    // Converts image array to base 64 string; used to shrink file size in order successfully send to backend\r\n    arrToBase64(buffer) {\r\n        let binary = '';\r\n        let bytes = new Uint8Array(buffer);\r\n        for (let i = 0; i < bytes.byteLength; i++) {\r\n            binary += String.fromCharCode(bytes[i]);\r\n        }\r\n        return window.btoa(binary);\r\n    }\r\n    // Ensures that the value of message is in sync with that of the input\r\n    updateMsg = (e) => {\r\n        this.setState({ msg: e.target.value });\r\n    }\r\n    shakeLock = () => {\r\n        anime({\r\n            targets: '.lock img',\r\n            keyframes: [\r\n                {translateX: Math.random() * 3, translateY: Math.random() * 3},\r\n                {translateX: Math.random() * 3, translateY: Math.random() * 3},\r\n            ],\r\n            duration: 300\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <form id=\"encode-form\" onSubmit={this.getCryptoImage}>\r\n                <input type=\"file\" accept=\"image/*\" onChange={this.processImage} name=\"imageFile\" required/>\r\n                <div className=\"image-display hidden\">\r\n                    <h3>Image Preview</h3>\r\n                    <img src={this.state.imageURI} alt=\"Cannot render\"/>\r\n                </div>\r\n                <div>\r\n                    <textarea placeholder=\"Enter in the message you wish to cryptify within in the image here...\" onChange={this.updateMsg} required></textarea>\r\n                </div>\r\n                <div className=\"lock\">\r\n                    <img src={lock} alt=\"Encodify\"/>\r\n                    <input type=\"submit\" onMouseOver={this.shakeLock}/>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Encode;"]},"metadata":{},"sourceType":"module"}