{"ast":null,"code":"var _jsxFileName = \"D:\\\\CryptoImage\\\\frontend\\\\src\\\\Decode.js\";\nimport React from 'react';\n\nclass Decode extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageArray: null,\n      imageURI: null,\n      msg: '',\n      receivedImg: ''\n    };\n\n    this.getCryptoImage = async e => {\n      e.preventDefault();\n      const res = await fetch('http://localhost:5000/encode', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          imageArray: this.arrToBase64(this.state.imageArray)\n        })\n      });\n      const data = await res.blob();\n      const url = URL.createObjectURL(data);\n      this.setState({\n        receivedImg: url\n      });\n    };\n\n    this.updateMsg = e => {\n      e.preventDefault();\n      this.setState({\n        msg: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"file-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.getCryptoImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Please select an image to cryptify\"), React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: this.getImage,\n      name: \"imageFile\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"product-display\",\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Image Preview\"), React.createElement(\"img\", {\n      src: this.state.imageURI,\n      alt: \"Cannot render\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      placeholder: \"Enter in the message you wish to cryptify within in the image here...\",\n      name: \"msg\",\n      required: true,\n      value: this.state.msg,\n      onChange: this.updateMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Decodify\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })), this.state.receivedImg.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.receivedImg,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: this.state.receivedImg,\n      download: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Click here to download!\")));\n  }\n\n}\n\nexport default Decode;","map":{"version":3,"sources":["D:/CryptoImage/frontend/src/Decode.js"],"names":["React","Decode","Component","state","imageArray","imageURI","msg","receivedImg","getCryptoImage","e","preventDefault","res","fetch","headers","method","body","JSON","stringify","arrToBase64","data","blob","url","URL","createObjectURL","setState","updateMsg","target","value","render","getImage","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Decode extends React.Component {\r\n    state = {\r\n        imageArray: null,\r\n        imageURI: null,\r\n        msg: '',\r\n        receivedImg: ''\r\n    }\r\n    getCryptoImage = async (e) => {\r\n        e.preventDefault();\r\n        const res = await fetch('http://localhost:5000/encode', {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({ imageArray: this.arrToBase64(this.state.imageArray) })\r\n        })\r\n        const data = await res.blob();\r\n        const url = URL.createObjectURL(data);\r\n        this.setState({ receivedImg: url })\r\n    }\r\n    updateMsg = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ msg: e.target.value });\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"file-container\">\r\n                <form onSubmit={this.getCryptoImage}>\r\n                    <p>Please select an image to cryptify</p>\r\n                    <input type=\"file\" accept=\"image/*\" onChange={this.getImage} name=\"imageFile\" required/>\r\n                    <div id=\"product-display\" className=\"hidden\">\r\n                        <h3>Image Preview</h3>\r\n                        <img src={this.state.imageURI} alt=\"Cannot render\"/>\r\n                    </div>\r\n                    <div>\r\n                        <textarea placeholder=\"Enter in the message you wish to cryptify within in the image here...\" name=\"msg\" required value={this.state.msg} onChange={this.updateMsg}></textarea>\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Decodify\"/>\r\n                </form>\r\n\r\n                { this.state.receivedImg.length > 0 &&\r\n                <div>\r\n                    <img src={this.state.receivedImg} alt=\"\"></img>\r\n                    <a href={this.state.receivedImg} download>Click here to download!</a>\r\n                </div> }\r\n            </div>   \r\n        );\r\n    }\r\n}\r\n\r\nexport default Decode;"]},"metadata":{},"sourceType":"module"}