{"ast":null,"code":"var _jsxFileName = \"D:\\\\CryptoImage\\\\frontend\\\\src\\\\Decode.js\";\nimport React from 'react';\nimport lock from './lock.png';\n\nclass Decode extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageArray: null,\n      imageURI: null\n    };\n\n    this.getCryptoMsg = async e => {\n      e.preventDefault();\n      const lockLoadAnime = this.props.getLockLoadAnime();\n      lockLoadAnime.play();\n      this.props.setLockRotating();\n      const pageLoadAnime = this.props.getPageLoadAnime();\n      pageLoadAnime.play();\n      fetch('http://localhost:5000/decode', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          imageArray: this.props.arrToBase64(this.state.imageArray)\n        })\n      }).then(res => res.text()).then(msg => {\n        this.props.decodeMsg(msg);\n        lockLoadAnime.pause();\n        pageLoadAnime.pause();\n        this.props.revertMainDisplay();\n        this.props.setLockNotRotating();\n      }); // Catch on error\n    };\n\n    this.processImage = e => {\n      const readerArray = new FileReader(),\n            readerURI = new FileReader();\n      const imageFile = e.target.files[0];\n\n      if (imageFile) {\n        readerArray.readAsArrayBuffer(imageFile);\n        readerURI.readAsDataURL(imageFile);\n        document.querySelector('.image-display').classList.remove('hidden');\n      }\n\n      readerArray.addEventListener('load', () => {\n        this.setState({\n          imageArray: readerArray.result\n        });\n      });\n      readerURI.addEventListener('load', () => {\n        this.setState({\n          imageURI: readerURI.result\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      id: \"decode-form\",\n      onSubmit: this.getCryptoMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: this.processImage,\n      name: \"imageFile\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"image-display hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Image Preview\"), React.createElement(\"img\", {\n      src: this.state.imageURI,\n      alt: \"Cannot render\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"lock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: lock,\n      alt: \"Decodify\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      onMouseOver: this.props.shakeLock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Decode;","map":{"version":3,"sources":["D:/CryptoImage/frontend/src/Decode.js"],"names":["React","lock","Decode","Component","state","imageArray","imageURI","getCryptoMsg","e","preventDefault","lockLoadAnime","props","getLockLoadAnime","play","setLockRotating","pageLoadAnime","getPageLoadAnime","fetch","headers","method","body","JSON","stringify","arrToBase64","then","res","text","msg","decodeMsg","pause","revertMainDisplay","setLockNotRotating","processImage","readerArray","FileReader","readerURI","imageFile","target","files","readAsArrayBuffer","readAsDataURL","document","querySelector","classList","remove","addEventListener","setState","result","render","shakeLock"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport lock from './lock.png'\r\n\r\nclass Decode extends React.Component {\r\n    state = {\r\n        imageArray: null,\r\n        imageURI: null,\r\n    }\r\n    // Sends image to backend and returns the decoded message to the parent to be displayed\r\n    // Catch error and output error message!\r\n    getCryptoMsg = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const lockLoadAnime = this.props.getLockLoadAnime();\r\n        lockLoadAnime.play();\r\n        this.props.setLockRotating();\r\n\r\n        const pageLoadAnime = this.props.getPageLoadAnime();\r\n        pageLoadAnime.play();\r\n\r\n        fetch('http://localhost:5000/decode', {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({ imageArray: this.props.arrToBase64(this.state.imageArray) })\r\n        })\r\n        .then((res) => res.text())\r\n        .then((msg) => {\r\n            this.props.decodeMsg(msg);\r\n            lockLoadAnime.pause();\r\n            pageLoadAnime.pause();\r\n            this.props.revertMainDisplay();\r\n            this.props.setLockNotRotating();\r\n        });\r\n        // Catch on error\r\n    }\r\n    // Takes in an image file and converts it both to URI to display to website + to an array to send to the backend\r\n    processImage = (e) => {\r\n        const readerArray = new FileReader(), readerURI = new FileReader();\r\n        const imageFile = e.target.files[0];\r\n\r\n        if (imageFile) {\r\n            readerArray.readAsArrayBuffer(imageFile);\r\n            readerURI.readAsDataURL(imageFile);\r\n            document.querySelector('.image-display').classList.remove('hidden');\r\n        }\r\n\r\n        readerArray.addEventListener('load', () => {\r\n            this.setState({\r\n                imageArray: readerArray.result,\r\n            });\r\n        });\r\n\r\n        readerURI.addEventListener('load', () => {\r\n            this.setState({\r\n                imageURI: readerURI.result,\r\n            });\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <form id=\"decode-form\" onSubmit={this.getCryptoMsg}>\r\n                <div>\r\n                    <input type=\"file\" accept=\"image/*\" onChange={this.processImage} name=\"imageFile\" required/>\r\n                </div>\r\n                <div className=\"image-display hidden\">\r\n                    <h3>Image Preview</h3>\r\n                    <img src={this.state.imageURI} alt=\"Cannot render\"/>\r\n                </div>\r\n                <div className=\"lock\">\r\n                    <img src={lock} alt=\"Decodify\"/>\r\n                    <input type=\"submit\" onMouseOver={this.props.shakeLock}/>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Decode;"]},"metadata":{},"sourceType":"module"}