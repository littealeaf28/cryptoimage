{"ast":null,"code":"var _jsxFileName = \"D:\\\\CryptoImage\\\\frontend\\\\src\\\\Encode.js\";\nimport React from 'react';\n\nclass Encode extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageArray: null,\n      imageURI: null,\n      // imageFile: null,\n      msg: ''\n    };\n\n    this.getImage = e => {\n      const readerArray = new FileReader(),\n            readerURI = new FileReader();\n      const imageFile = e.target.files[0];\n\n      if (imageFile) {\n        readerArray.readAsArrayBuffer(imageFile);\n        readerURI.readAsDataURL(imageFile);\n        document.getElementById('product-display').classList.remove('hidden');\n      }\n\n      readerArray.addEventListener('load', () => {\n        this.setState({\n          imageArray: readerArray.result\n        });\n      });\n      readerURI.addEventListener('load', () => {\n        this.setState({\n          imageURI: readerURI.result\n        });\n      });\n    };\n\n    this.getCryptoImage = async e => {\n      e.preventDefault(); // const dotIndex = this.state.imageFile.name.lastIndexOf('.');\n      // const fileType = this.state.imageFile.name.substring(dotIndex)\n\n      const res = await fetch('http://localhost:5000/encode', {\n        method: 'POST',\n        body: JSON.stringify({\n          msg: this.state.msg,\n          imageArray: this.state.imageArray\n        })\n      });\n      const data = await res.json();\n      console.log(data);\n    };\n  }\n\n  updateMsg(e) {\n    e.preventDefault();\n    console.log(e.target.value);\n    this.setState({\n      msg: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"file-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.getCryptoImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Please select an image to cryptify\"), React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: this.getImage,\n      name: \"imageFile\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"product-display\",\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Image Preview\"), React.createElement(\"img\", {\n      src: this.state.imageURI,\n      alt: \"Cannot render\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      placeholder: \"Enter in the message you wish to cryptify within in the image here...\",\n      name: \"msg\",\n      required: true,\n      value: this.state.msg,\n      onChange: this.updateMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Cryptify\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Encode;","map":{"version":3,"sources":["D:/CryptoImage/frontend/src/Encode.js"],"names":["React","Encode","Component","state","imageArray","imageURI","msg","getImage","e","readerArray","FileReader","readerURI","imageFile","target","files","readAsArrayBuffer","readAsDataURL","document","getElementById","classList","remove","addEventListener","setState","result","getCryptoImage","preventDefault","res","fetch","method","body","JSON","stringify","data","json","console","log","updateMsg","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Encode extends React.Component {\r\n    state = {\r\n        imageArray: null,\r\n        imageURI: null,\r\n        // imageFile: null,\r\n        msg: ''\r\n    }\r\n    getImage = (e) => {\r\n        const readerArray = new FileReader(), readerURI = new FileReader();\r\n        const imageFile = e.target.files[0];\r\n\r\n        if (imageFile) {\r\n            readerArray.readAsArrayBuffer(imageFile);\r\n            readerURI.readAsDataURL(imageFile);\r\n            document.getElementById('product-display').classList.remove('hidden');\r\n        }\r\n\r\n        readerArray.addEventListener('load', () => {\r\n            this.setState({\r\n                imageArray: readerArray.result,\r\n            });\r\n        });\r\n\r\n        readerURI.addEventListener('load', () => {\r\n            this.setState({\r\n                imageURI: readerURI.result,\r\n            });\r\n        });\r\n    }\r\n    getCryptoImage = async (e) => {\r\n        e.preventDefault();\r\n        // const dotIndex = this.state.imageFile.name.lastIndexOf('.');\r\n        // const fileType = this.state.imageFile.name.substring(dotIndex)\r\n        const res = await fetch('http://localhost:5000/encode', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ msg: this.state.msg, imageArray: this.state.imageArray })\r\n        })\r\n        const data = await res.json()\r\n        console.log(data)\r\n    }\r\n\r\n    updateMsg(e) {\r\n        e.preventDefault();\r\n        console.log(e.target.value);\r\n        this.setState({ msg: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"file-container\">\r\n                <form onSubmit={this.getCryptoImage}>\r\n                    <p>Please select an image to cryptify</p>\r\n                    <input type=\"file\" accept=\"image/*\" onChange={this.getImage} name=\"imageFile\" required/>\r\n                    <div id=\"product-display\" className=\"hidden\">\r\n                        <h3>Image Preview</h3>\r\n                        <img src={this.state.imageURI} alt=\"Cannot render\"/>\r\n                    </div>\r\n                    <div>\r\n                        <textarea placeholder=\"Enter in the message you wish to cryptify within in the image here...\" name=\"msg\" required value={this.state.msg} onChange={this.updateMsg}></textarea>\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Cryptify\"/>\r\n                </form>\r\n            </div>   \r\n        );\r\n    }\r\n}\r\n\r\nexport default Encode;"]},"metadata":{},"sourceType":"module"}