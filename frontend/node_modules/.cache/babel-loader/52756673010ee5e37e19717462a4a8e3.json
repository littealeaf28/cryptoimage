{"ast":null,"code":"var _jsxFileName = \"D:\\\\CryptoImage\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport Encode from './Encode';\nimport Decode from './Decode';\nimport { BrowserRouter, Route, NavLink, Switch } from 'react-router-dom';\nimport Display from './Display';\nimport Redirect from './Redirect';\nimport anime from 'animejs/lib/anime.es';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      receivedMsg: '',\n      receivedImg: '',\n      lockIsRotating: false,\n      errorMsg: ''\n    };\n\n    this.encodeImg = receivedImg => {\n      this.setState({\n        receivedImg: receivedImg\n      });\n      setTimeout(() => {\n        this.scaleImage(document.getElementById('output-image'));\n      }, 10);\n    };\n\n    this.decodeMsg = receivedMsg => {\n      this.setState({\n        receivedMsg: receivedMsg\n      });\n    };\n\n    this.obtainError = errorMsg => {\n      this.setState({\n        errorMsg: errorMsg\n      });\n    };\n\n    this.scaleImage = image => {\n      image.classList.remove('fill-width');\n      image.classList.remove('fill-height');\n      const widthScale = 0.8 * window.innerWidth / image.clientWidth;\n      const heightScale = 0.4 * window.innerHeight / image.clientHeight;\n      const fillClass = widthScale <= heightScale ? 'fill-width' : 'fill-height';\n      image.classList.add(fillClass);\n    };\n\n    this.resetReceivedState = () => {\n      this.setState({\n        receivedMsg: '',\n        receivedImg: '',\n        errorMsg: ''\n      });\n    };\n\n    this.getPageLoadAnime = () => {\n      const mainDisplay = document.querySelector('.main-display');\n      const mainDisplayObj = {\n        height: mainDisplay.clientHeight + 'px'\n      };\n      const pageLoadAnime = anime({\n        targets: mainDisplayObj,\n        height: window.innerHeight - 48 + 'px',\n        duration: 4000,\n        easing: 'linear',\n        update: function () {\n          mainDisplay.style.height = mainDisplayObj.height;\n        }\n      });\n      return pageLoadAnime;\n    };\n\n    this.revertMainDisplay = () => {\n      document.querySelector('.main-display').style.height = 'initial';\n    };\n\n    this.getLockLoadAnime = () => {\n      const lockLoadAnime = anime({\n        targets: '.lock img',\n        rotate: 360,\n        loop: true,\n        duration: 2000\n      });\n      return lockLoadAnime;\n    };\n\n    this.setLockRotating = () => {\n      this.setState({\n        lockIsRotating: true\n      });\n    };\n\n    this.setLockNotRotating = () => {\n      this.setState({\n        lockIsRotating: false\n      });\n    };\n\n    this.shakeLock = () => {\n      if (!this.state.lockIsRotating) {\n        anime({\n          targets: '.lock img',\n          keyframes: [{\n            rotate: 10\n          }, {\n            rotate: -10\n          }, {\n            rotate: 0\n          }]\n        });\n      }\n    };\n  }\n\n  // Converts image array to base 64 string; used to shrink file size in order successfully send to backend\n  arrToBase64(buffer) {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n\n    return window.btoa(binary);\n  }\n\n  render() {\n    return React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"main-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"CryptoImage\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Fun way to encrypt messages to friends!\")), React.createElement(NavLink, {\n      to: \"/encode\",\n      onClick: this.resetReceivedState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Encode\"), React.createElement(NavLink, {\n      to: \"/decode\",\n      onClick: this.resetReceivedState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Decode\"), React.createElement(\"div\", {\n      id: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/encode\",\n      render: props => React.createElement(Encode, Object.assign({}, props, {\n        encodeImg: this.encodeImg,\n        getPageLoadAnime: this.getPageLoadAnime,\n        revertMainDisplay: this.revertMainDisplay,\n        getLockLoadAnime: this.getLockLoadAnime,\n        setLockNotRotating: this.setLockNotRotating,\n        setLockRotating: this.setLockRotating,\n        shakeLock: this.shakeLock,\n        arrToBase64: this.arrToBase64,\n        scaleImage: this.scaleImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/decode\",\n      render: props => React.createElement(Decode, Object.assign({}, props, {\n        decodeMsg: this.decodeMsg,\n        getPageLoadAnime: this.getPageLoadAnime,\n        revertMainDisplay: this.revertMainDisplay,\n        getLockLoadAnime: this.getLockLoadAnime,\n        setLockNotRotating: this.setLockNotRotating,\n        setLockRotating: this.setLockRotating,\n        shakeLock: this.shakeLock,\n        arrToBase64: this.arrToBase64,\n        scaleImage: this.scaleImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/*\",\n      component: Redirect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })))), React.createElement(\"svg\", {\n      className: \"border-curve\",\n      viewBox: \"0 0 1038 37\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"path\", {\n      d: \"M0 0h1038v37H0z\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(\"path\", {\n      d: \"M173 21.82C112 2.78 56 2.264 0 19.246V37h1038V19.247c-61 19.04-117 19.554-173 2.572-61-19.04-117-19.554-173-2.572-61 19.04-117 19.554-173 2.572-61-19.04-117-19.554-173-2.572-61 19.04-117 19.554-173 2.572z\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(Display, {\n      receivedImg: this.state.receivedImg,\n      receivedMsg: this.state.receivedMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/CryptoImage/frontend/src/App.js"],"names":["React","Encode","Decode","BrowserRouter","Route","NavLink","Switch","Display","Redirect","anime","App","Component","state","receivedMsg","receivedImg","lockIsRotating","errorMsg","encodeImg","setState","setTimeout","scaleImage","document","getElementById","decodeMsg","obtainError","image","classList","remove","widthScale","window","innerWidth","clientWidth","heightScale","innerHeight","clientHeight","fillClass","add","resetReceivedState","getPageLoadAnime","mainDisplay","querySelector","mainDisplayObj","height","pageLoadAnime","targets","duration","easing","update","style","revertMainDisplay","getLockLoadAnime","lockLoadAnime","rotate","loop","setLockRotating","setLockNotRotating","shakeLock","keyframes","arrToBase64","buffer","binary","bytes","Uint8Array","i","byteLength","String","fromCharCode","btoa","render","props"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Encode from './Encode'\nimport Decode from './Decode'\nimport { BrowserRouter, Route, NavLink, Switch } from 'react-router-dom'\nimport Display from './Display';\nimport Redirect from './Redirect';\nimport anime from 'animejs/lib/anime.es'\n\nclass App extends React.Component {\n  state = {\n    receivedMsg: '',\n    receivedImg: '',\n    lockIsRotating: false,\n    errorMsg: ''\n  }\n  // Way for Encode component to pass image to App component\n  encodeImg = (receivedImg) => {\n    this.setState({\n      receivedImg: receivedImg,\n    });\n    setTimeout(() => {\n      this.scaleImage(document.getElementById('output-image'));\n    }, 10);\n  }\n  // Way for Decode component to pass message to App component\n  decodeMsg = (receivedMsg) => {\n    this.setState({\n      receivedMsg: receivedMsg,\n    });\n  }\n  // Way for subcomponents to pass error message to App component\n  obtainError = (errorMsg) => {\n    this.setState({\n      errorMsg: errorMsg\n    });\n  }\n  // Converts image array to base 64 string; used to shrink file size in order successfully send to backend\n  arrToBase64(buffer) {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n  }\n\n  scaleImage = (image) => {\n    image.classList.remove('fill-width');\n    image.classList.remove('fill-height');\n\n    const widthScale = 0.8 * window.innerWidth / image.clientWidth;\n    const heightScale = 0.4 * window.innerHeight / image.clientHeight;\n\n    const fillClass = (widthScale <= heightScale) ? 'fill-width' : 'fill-height';\n\n    image.classList.add(fillClass);\n  }\n  \n  resetReceivedState = () => {\n    this.setState({\n      receivedMsg: '',\n      receivedImg: '',\n      errorMsg: ''\n    });\n  }\n\n  getPageLoadAnime = () => {\n    const mainDisplay = document.querySelector('.main-display');\n    const mainDisplayObj = {\n        height: mainDisplay.clientHeight + 'px'\n    }\n    const pageLoadAnime = anime({\n        targets: mainDisplayObj,\n        height: (window.innerHeight - 48) + 'px',\n        duration: 4000,\n        easing: 'linear',\n        update: function() {\n            mainDisplay.style.height = mainDisplayObj.height;\n        }\n    });\n    return pageLoadAnime;\n  }\n  revertMainDisplay = () => {\n    document.querySelector('.main-display').style.height = 'initial';\n  }\n  getLockLoadAnime = () => {\n    const lockLoadAnime = anime({\n      targets: '.lock img',\n      rotate: 360,\n      loop: true,\n      duration: 2000\n    });\n    return lockLoadAnime;\n  }\n\n  setLockRotating = () => {\n    this.setState({\n      lockIsRotating: true\n    });\n  }\n  setLockNotRotating = () => {\n    this.setState({\n      lockIsRotating: false\n    });\n  }\n  shakeLock = () => {\n    if (!this.state.lockIsRotating) {\n      anime({\n          targets: '.lock img',\n          keyframes: [\n              { rotate: 10 },\n              { rotate: -10 },\n              { rotate: 0 }\n          ]\n      });\n    }\n  }\n  render() {\n    return (\n      <BrowserRouter>\n        <div id=\"App\">\n          <section className=\"main-display\">\n            <h1>CryptoImage</h1>\n            <p><em>Fun way to encrypt messages to friends!</em></p>\n            <NavLink to=\"/encode\" onClick={this.resetReceivedState}>Encode</NavLink>\n            <NavLink to=\"/decode\" onClick={this.resetReceivedState}>Decode</NavLink>\n            <div id=\"main\">\n              <Switch>\n                <Route path=\"/encode\" render={(props) => <Encode {...props} encodeImg={this.encodeImg} getPageLoadAnime={this.getPageLoadAnime} revertMainDisplay={this.revertMainDisplay} getLockLoadAnime={this.getLockLoadAnime} setLockNotRotating={this.setLockNotRotating} setLockRotating={this.setLockRotating} shakeLock={this.shakeLock} arrToBase64={this.arrToBase64} scaleImage={this.scaleImage}/>}/>\n                <Route path=\"/decode\" render={(props) => <Decode {...props} decodeMsg={this.decodeMsg} getPageLoadAnime={this.getPageLoadAnime} revertMainDisplay={this.revertMainDisplay} getLockLoadAnime={this.getLockLoadAnime} setLockNotRotating={this.setLockNotRotating} setLockRotating={this.setLockRotating} shakeLock={this.shakeLock} arrToBase64={this.arrToBase64} scaleImage={this.scaleImage}/>}/>\n                <Route path=\"/*\" component={Redirect}/>\n              </Switch>\n            </div>\n          </section>\n          <svg className=\"border-curve\" viewBox=\"0 0 1038 37\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M0 0h1038v37H0z\"/>\n            <path d=\"M173 21.82C112 2.78 56 2.264 0 19.246V37h1038V19.247c-61 19.04-117 19.554-173 2.572-61-19.04-117-19.554-173-2.572-61 19.04-117 19.554-173 2.572-61-19.04-117-19.554-173-2.572-61 19.04-117 19.554-173 2.572z\"/>\n          </svg>\n          <Display receivedImg={this.state.receivedImg} receivedMsg={this.state.receivedMsg}/>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}