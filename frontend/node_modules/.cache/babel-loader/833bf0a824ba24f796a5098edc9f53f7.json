{"ast":null,"code":"var _jsxFileName = \"D:\\\\CryptoImage\\\\frontend\\\\src\\\\Encode.js\";\nimport React from 'react';\n\nclass Encode extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageArray: null,\n      imageURI: null,\n      imageFile: null,\n      msg: null\n    };\n\n    this.getImage = e => {\n      const readerArray = new FileReader(),\n            readerURI = new FileReader();\n      const imageFile = e.target.files[0];\n\n      if (imageFile) {\n        readerArray.readAsArrayBuffer(imageFile);\n        readerURI.readAsDataURL(imageFile);\n        document.getElementById('product-display').classList.remove('hidden');\n      }\n\n      reader.addEventListener('load', () => {\n        this.setState({\n          imageArray: readerArray.result,\n          imageURI: readerURI.result,\n          imageFile: imageFile\n        });\n      });\n    };\n\n    this.getCryptoImage = async e => {\n      e.preventDefault();\n      await this.setState({\n        msg: document.querySelector('textarea[name=\"msg\"]').value\n      }); // const dotIndex = this.state.imageFile.name.lastIndexOf('.');\n      // const fileType = this.state.imageFile.name.substring(dotIndex)\n\n      await fetch('http://localhost:5000/encode-msg', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          msg: this.state.msg\n        })\n      });\n      const formData = new FormData();\n      formData.append('file', this.state.imageFile);\n      const options = {\n        method: 'POST',\n        body: formData\n      };\n      await fetch('http://localhost:5000/encode-image', options).then(res => res.text()).then(data => {\n        console.log(data);\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"file-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.getCryptoImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Please select an image to cryptify\"), React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: this.getImage,\n      name: \"imageFile\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"product-display\",\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Image Preview\"), React.createElement(\"img\", {\n      src: this.state.imageURI,\n      alt: \"Cannot render\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      placeholder: \"Enter in the message you wish to cryptify within in the image here...\",\n      name: \"msg\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Cryptify\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Encode;","map":{"version":3,"sources":["D:/CryptoImage/frontend/src/Encode.js"],"names":["React","Encode","Component","state","imageArray","imageURI","imageFile","msg","getImage","e","readerArray","FileReader","readerURI","target","files","readAsArrayBuffer","readAsDataURL","document","getElementById","classList","remove","reader","addEventListener","setState","result","getCryptoImage","preventDefault","querySelector","value","fetch","method","headers","body","JSON","stringify","formData","FormData","append","options","then","res","text","data","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Encode extends React.Component {\r\n    state = {\r\n        imageArray: null,\r\n        imageURI: null,\r\n        imageFile: null,\r\n        msg: null\r\n    }\r\n    getImage = (e) => {\r\n        const readerArray = new FileReader(), readerURI = new FileReader();\r\n        const imageFile = e.target.files[0];\r\n\r\n        if (imageFile) {\r\n            readerArray.readAsArrayBuffer(imageFile);\r\n            readerURI.readAsDataURL(imageFile);\r\n            document.getElementById('product-display').classList.remove('hidden');\r\n        }\r\n\r\n        reader.addEventListener('load', () => {\r\n            this.setState({\r\n                imageArray: readerArray.result,\r\n                imageURI: readerURI.result,\r\n                imageFile: imageFile\r\n            });\r\n        });\r\n    }\r\n    getCryptoImage = async (e) => {\r\n        e.preventDefault();\r\n        await this.setState({\r\n            msg: document.querySelector('textarea[name=\"msg\"]').value\r\n        });\r\n\r\n        // const dotIndex = this.state.imageFile.name.lastIndexOf('.');\r\n        // const fileType = this.state.imageFile.name.substring(dotIndex)\r\n        await fetch('http://localhost:5000/encode-msg', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ msg: this.state.msg })\r\n        })\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', this.state.imageFile);\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            body: formData\r\n        }\r\n\r\n        await fetch('http://localhost:5000/encode-image', options)\r\n        .then((res) => res.text())\r\n        .then((data) => {\r\n            console.log(data);\r\n        });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"file-container\">\r\n                <form onSubmit={this.getCryptoImage}>\r\n                    <p>Please select an image to cryptify</p>\r\n                    <input type=\"file\" accept=\"image/*\" onChange={this.getImage} name=\"imageFile\" required/>\r\n                    <div id=\"product-display\" className=\"hidden\">\r\n                        <h3>Image Preview</h3>\r\n                        <img src={this.state.imageURI} alt=\"Cannot render\"/>\r\n                    </div>\r\n                    <div>\r\n                        <textarea placeholder=\"Enter in the message you wish to cryptify within in the image here...\" name=\"msg\" required></textarea>\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Cryptify\"/>\r\n                </form>\r\n            </div>   \r\n        );\r\n    }\r\n}\r\n\r\nexport default Encode;"]},"metadata":{},"sourceType":"module"}