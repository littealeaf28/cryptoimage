{"ast":null,"code":"var _jsxFileName = \"D:\\\\CryptoImage\\\\frontend\\\\src\\\\Encode.js\";\nimport React from 'react';\nimport lock from './lock.png';\n\nclass Encode extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageArray: null,\n      imageURI: null,\n      msg: ''\n    };\n\n    this.getCryptoImage = async e => {\n      e.preventDefault();\n      const lockLoadAnime = this.props.getLockLoadAnime();\n      lockLoadAnime.play();\n      this.props.setLockRotating();\n      const pageLoadAnime = this.props.getPageLoadAnime();\n      pageLoadAnime.play();\n      fetch('http://localhost:5000/encode', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          msg: this.state.msg,\n          imageArray: this.props.arrToBase64(this.state.imageArray)\n        })\n      }).then(res => res.blob()).then(imageData => {\n        this.props.encodeImg(URL.createObjectURL(imageData));\n        lockLoadAnime.pause();\n        pageLoadAnime.pause();\n        this.props.revertMainDisplay();\n        this.props.setLockNotRotating();\n      });\n    };\n\n    this.scaleImage = () => {\n      //const image = document.querySelector('.image');\n      //image.classList.remove('fill-width');\n      //image.classList.remove('fill-height');\n      //const fillClass = ((0.4 * window.innerHeight / image.clientHeight) > (0.8 * window.innerWidth / image.clientWidth)) ? 'fill-width' : 'fill-height';\n      //document.querySelector('.image').classList.add(fillClass);\n      console.log(0.4 * window.innerHeight);\n      console.log(image.clientHeight);\n      console.log(0.6 * window.innerWidth);\n      console.log(image.clientWidth);\n    };\n\n    this.processImage = e => {\n      const readerArray = new FileReader(),\n            readerURI = new FileReader();\n      const imageFile = e.target.files[0];\n\n      if (imageFile) {\n        readerArray.readAsArrayBuffer(imageFile);\n        readerURI.readAsDataURL(imageFile);\n        document.querySelector('.image-display').classList.remove('hidden');\n        this.scaleImage();\n      }\n\n      readerArray.addEventListener('load', () => {\n        this.setState({\n          imageArray: readerArray.result\n        });\n      });\n      readerURI.addEventListener('load', () => {\n        this.setState({\n          imageURI: readerURI.result\n        });\n      });\n    };\n\n    this.updateMsg = e => {\n      this.setState({\n        msg: e.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      id: \"encode-form\",\n      onSubmit: this.getCryptoImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: this.processImage,\n      name: \"imageFile\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"image-display hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Image Preview\"), React.createElement(\"img\", {\n      className: \"image\",\n      src: this.state.imageURI,\n      alt: \"Cannot render\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      placeholder: \"Enter in the message you wish to cryptify within in the image here...\",\n      onChange: this.updateMsg,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"lock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: lock,\n      alt: \"Encodify\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      onMouseOver: this.props.shakeLock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Encode;","map":{"version":3,"sources":["D:/CryptoImage/frontend/src/Encode.js"],"names":["React","lock","Encode","Component","state","imageArray","imageURI","msg","getCryptoImage","e","preventDefault","lockLoadAnime","props","getLockLoadAnime","play","setLockRotating","pageLoadAnime","getPageLoadAnime","fetch","headers","method","body","JSON","stringify","arrToBase64","then","res","blob","imageData","encodeImg","URL","createObjectURL","pause","revertMainDisplay","setLockNotRotating","scaleImage","console","log","window","innerHeight","image","clientHeight","innerWidth","clientWidth","processImage","readerArray","FileReader","readerURI","imageFile","target","files","readAsArrayBuffer","readAsDataURL","document","querySelector","classList","remove","addEventListener","setState","result","updateMsg","value","render","shakeLock"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport lock from './lock.png';\r\n\r\nclass Encode extends React.Component {\r\n    state = {\r\n        imageArray: null,\r\n        imageURI: null,\r\n        msg: '',\r\n    }\r\n    // Sends image and message to backend and returns the image URI to display to website\r\n    getCryptoImage = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const lockLoadAnime = this.props.getLockLoadAnime();\r\n        lockLoadAnime.play();\r\n        this.props.setLockRotating();\r\n\r\n        const pageLoadAnime = this.props.getPageLoadAnime();\r\n        pageLoadAnime.play();\r\n\r\n        fetch('http://localhost:5000/encode', {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({ msg: this.state.msg, imageArray: this.props.arrToBase64(this.state.imageArray) })\r\n        })\r\n        .then((res) => res.blob())\r\n        .then((imageData) => {\r\n            this.props.encodeImg(URL.createObjectURL(imageData));\r\n            lockLoadAnime.pause();\r\n            pageLoadAnime.pause();\r\n            this.props.revertMainDisplay();\r\n            this.props.setLockNotRotating();\r\n        })\r\n    }\r\n    scaleImage = () => {\r\n        //const image = document.querySelector('.image');\r\n        //image.classList.remove('fill-width');\r\n        //image.classList.remove('fill-height');\r\n        //const fillClass = ((0.4 * window.innerHeight / image.clientHeight) > (0.8 * window.innerWidth / image.clientWidth)) ? 'fill-width' : 'fill-height';\r\n        //document.querySelector('.image').classList.add(fillClass);\r\n        console.log(0.4 * window.innerHeight);\r\n        console.log(image.clientHeight);\r\n        console.log(0.6 * window.innerWidth);\r\n        console.log(image.clientWidth);\r\n    }\r\n    // Takes in an image file and converts it both to URI to display to website + to an array to send to the backend\r\n    processImage = (e) => {\r\n        const readerArray = new FileReader(), readerURI = new FileReader();\r\n        const imageFile = e.target.files[0];\r\n\r\n        if (imageFile) {\r\n            readerArray.readAsArrayBuffer(imageFile);\r\n            readerURI.readAsDataURL(imageFile);\r\n            document.querySelector('.image-display').classList.remove('hidden');\r\n            this.scaleImage();\r\n        }\r\n\r\n        readerArray.addEventListener('load', () => {\r\n            this.setState({\r\n                imageArray: readerArray.result,\r\n            });\r\n        });\r\n\r\n        readerURI.addEventListener('load', () => {\r\n            this.setState({\r\n                imageURI: readerURI.result,\r\n            });\r\n        });\r\n    }\r\n    // Ensures that the value of message is in sync with that of the input\r\n    updateMsg = (e) => {\r\n        this.setState({ msg: e.target.value });\r\n    }\r\n    render() {\r\n        return (\r\n            <form id=\"encode-form\" onSubmit={this.getCryptoImage}>\r\n                <div>\r\n                <input type=\"file\" accept=\"image/*\" onChange={this.processImage} name=\"imageFile\" required/>\r\n                </div>\r\n                <div className=\"image-display hidden\">\r\n                    <h3>Image Preview</h3>\r\n                    <img className=\"image\" src={this.state.imageURI} alt=\"Cannot render\"/>\r\n                </div>\r\n                <div>\r\n                    <textarea placeholder=\"Enter in the message you wish to cryptify within in the image here...\" onChange={this.updateMsg} required></textarea>\r\n                </div>\r\n                <div className=\"lock\">\r\n                    <img src={lock} alt=\"Encodify\"/>\r\n                    <input type=\"submit\" onMouseOver={this.props.shakeLock}/>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Encode;"]},"metadata":{},"sourceType":"module"}