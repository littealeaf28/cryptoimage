{"ast":null,"code":"var _jsxFileName = \"D:\\\\CryptoImage\\\\frontend\\\\src\\\\Decode.js\";\nimport React from 'react';\n\nclass Decode extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageArray: null,\n      imageURI: null,\n      receivedMsg: ''\n    };\n\n    this.getCryptoMsg = async e => {\n      e.preventDefault();\n      this.props.decodeMsg('');\n      const res = await fetch('http://localhost:5000/decode', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          imageArray: this.arrToBase64(this.state.imageArray)\n        })\n      });\n      const data = await res.text();\n      this.props.decodeMsg(data);\n    };\n\n    this.processImage = e => {\n      const readerArray = new FileReader(),\n            readerURI = new FileReader();\n      const imageFile = e.target.files[0];\n\n      if (imageFile) {\n        readerArray.readAsArrayBuffer(imageFile);\n        readerURI.readAsDataURL(imageFile);\n        document.getElementById('image-display').classList.remove('hidden');\n      }\n\n      readerArray.addEventListener('load', () => {\n        this.setState({\n          imageArray: readerArray.result\n        });\n      });\n      readerURI.addEventListener('load', () => {\n        this.setState({\n          imageURI: readerURI.result\n        });\n      });\n    };\n  }\n\n  arrToBase64(buffer) {\n    let binary = '';\n    let bytes = new Uint8Array(buffer);\n    let len = bytes.byteLength;\n\n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n\n    return window.btoa(binary);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"file-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.getCryptoMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Please select an image to cryptify\"), React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: this.processImage,\n      name: \"imageFile\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"image-display\",\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Image Preview\"), React.createElement(\"img\", {\n      src: this.state.imageURI,\n      alt: \"Cannot render\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Decodify\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), this.state.receivedMsg.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.state.receivedMsg)));\n  }\n\n}\n\nexport default Decode;","map":{"version":3,"sources":["D:/CryptoImage/frontend/src/Decode.js"],"names":["React","Decode","Component","state","imageArray","imageURI","receivedMsg","getCryptoMsg","e","preventDefault","props","decodeMsg","res","fetch","headers","method","body","JSON","stringify","arrToBase64","data","text","processImage","readerArray","FileReader","readerURI","imageFile","target","files","readAsArrayBuffer","readAsDataURL","document","getElementById","classList","remove","addEventListener","setState","result","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","render","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Decode extends React.Component {\r\n    state = {\r\n        imageArray: null,\r\n        imageURI: null,\r\n        receivedMsg: ''\r\n    }\r\n    getCryptoMsg = async (e) => {\r\n        e.preventDefault();\r\n        this.props.decodeMsg('');\r\n        const res = await fetch('http://localhost:5000/decode', {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({ imageArray: this.arrToBase64(this.state.imageArray) })\r\n        })\r\n        const data = await res.text();\r\n        this.props.decodeMsg(data);\r\n    }\r\n    processImage = (e) => {\r\n        const readerArray = new FileReader(), readerURI = new FileReader();\r\n        const imageFile = e.target.files[0];\r\n\r\n        if (imageFile) {\r\n            readerArray.readAsArrayBuffer(imageFile);\r\n            readerURI.readAsDataURL(imageFile);\r\n            document.getElementById('image-display').classList.remove('hidden');\r\n        }\r\n\r\n        readerArray.addEventListener('load', () => {\r\n            this.setState({\r\n                imageArray: readerArray.result,\r\n            });\r\n        });\r\n\r\n        readerURI.addEventListener('load', () => {\r\n            this.setState({\r\n                imageURI: readerURI.result,\r\n            });\r\n        });\r\n    }\r\n    arrToBase64(buffer) {\r\n        let binary = '';\r\n        let bytes = new Uint8Array(buffer);\r\n        let len = bytes.byteLength;\r\n        for (let i = 0; i < len; i++) {\r\n            binary += String.fromCharCode(bytes[i]);\r\n        }\r\n        return window.btoa(binary);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"file-container\">\r\n                <form onSubmit={this.getCryptoMsg}>\r\n                    <p>Please select an image to cryptify</p>\r\n                    <input type=\"file\" accept=\"image/*\" onChange={this.processImage} name=\"imageFile\" required/>\r\n                    <div id=\"image-display\" className=\"hidden\">\r\n                        <h3>Image Preview</h3>\r\n                        <img src={this.state.imageURI} alt=\"Cannot render\"/>\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Decodify\"/>\r\n                </form>\r\n\r\n                { this.state.receivedMsg.length > 0 &&\r\n                <div>\r\n                    <h3>{this.state.receivedMsg}</h3>\r\n                </div> }\r\n            </div>   \r\n        );\r\n    }\r\n}\r\n\r\nexport default Decode;"]},"metadata":{},"sourceType":"module"}